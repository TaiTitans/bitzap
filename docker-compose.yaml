version: '3.8'

services:
  postgres:
    image: postgres:15
    container_name: postgres
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin123
      POSTGRES_DB: bitzap
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

  redis-master:
    image: redis:7
    container_name: redis-master
    ports:
      - "6379:6379"
    command: ["redis-server", "--requirepass", "redispass", "--appendonly", "yes"]
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "redispass", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  redis-replica:
    image: redis:7
    container_name: redis-replica
    command: >
      redis-server
      --replicaof redis-master 6379
      --requirepass redispass
      --masterauth redispass
    depends_on:
      redis-master:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "redispass", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  redis-sentinel:
    image: redis:7
    container_name: redis-sentinel
    ports:
      - "26379:26379"
    command: >
      sh -c "
        cat <<EOF > /etc/sentinel.conf
        port 26379
        sentinel monitor mymaster redis-master 6379 2
        sentinel auth-pass mymaster redispass
        sentinel down-after-milliseconds mymaster 5000
        sentinel failover-timeout mymaster 10000
        sentinel parallel-syncs mymaster 1
        EOF
        redis-sentinel /etc/sentinel.conf"
    depends_on:
      redis-master:
        condition: service_healthy
      redis-replica:
        condition: service_healthy

  clickhouse:
    image: clickhouse/clickhouse-server:23.3
    container_name: clickhouse
    ports:
      - "8123:8123"
      - "9000:9000"

  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_CFG_NODE_ID: 1
      KAFKA_CFG_PROCESS_ROLES: broker,controller
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_KRAFT_CLUSTER_ID: "cluster-1"
      ALLOW_PLAINTEXT_LISTENER: "yes"

  kong-database:
    image: postgres:15
    container_name: kong-database
    environment:
      POSTGRES_USER: kong
      POSTGRES_DB: kong
      POSTGRES_PASSWORD: kong
    ports:
      - "5433:5432"
    volumes:
      - kong_data:/var/lib/postgresql/data

  kong-migrations:
    image: kong:3.6
    command: kong migrations bootstrap
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_PASSWORD: kong
      KONG_PG_USER: kong
      KONG_PG_DATABASE: kong
    depends_on:
      - kong-database

  kong:
    image: kong:3.6
    container_name: kong
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_PASSWORD: kong
      KONG_PG_USER: kong
      KONG_PG_DATABASE: kong
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001, 0.0.0.0:8444 ssl
    ports:
      - "8000:8000"   # Kong proxy
      - "8443:8443"   # Kong proxy SSL
      - "8001:8001"   # Kong admin API
      - "8444:8444"   # Kong admin API SSL
    depends_on:
      - kong-database
      - kong-migrations

  konga:
    image: pantsel/konga:latest
    container_name: konga
    environment:
      - NODE_ENV=production
    ports:
      - "1337:1337"
    depends_on:
      - kong

volumes:
  postgres_data:
  kong_data: